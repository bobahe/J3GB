// App.java

import java.util.ArrayList;
import java.util.Arrays;

public class App {
    public static void main(String[] args) {
        //
        // Change elements postition test
        //
        Integer[] a = {1, 2, 4, 3, 5};
        changePostitionInArray(2, 3, a);
        for (int i = 0; i < a.length; i++) {
            if (i == a.length - 1) {
                System.out.println(a[i]);
                continue;
            }

            System.out.print(a[i] + ", ");
        }
        System.out.println();
        /////////////////////////////////////////////////////////////////////////////////////////////////////

        //
        // Create ArrayList from array test
        //
        System.out.println(toArrayList(a) + "\n");
        /////////////////////////////////////////////////////////////////////////////////////////////////////

        //
        // Fruits
        //
        System.out.println("Проверка работы коробок для фруктов");
        Box<Apple> box1 = new Box<>();
        Box<Apple> box2 = new Box<>();
        Box<Orange> box3 = new Box<>();

        box1.addFruit(new Apple());
        box1.addFruit(new Apple());
        box1.addFruit(new Apple());

        box2.addFruit(new Apple());
        box2.addFruit(new Apple());
        box2.addFruit(new Apple());
        box2.addFruit(new Apple());
        box2.addFruit(new Apple());
        box2.addFruit(new Apple());

        box3.addFruit(new Orange());
        box3.addFruit(new Orange());

        printWeights(box1, box2, box3);

        System.out.println();

        compareBoxes(box1, box2, box3);

        System.out.println();

        System.out.println("Пересыпаем все из коробки №1 в коробку №2");
        box1.pourTo(box2);

        // не сработает, потому что несовместимые типа в коробках
        // box1.pourTo(box3);

        System.out.println();

        printWeights(box1, box2, box3);

        System.out.println();

        compareBoxes(box1, box2, box3);
    }

    private static void printWeights(Box<Apple> box1, Box<Apple> box2, Box<Orange> box3) {
        System.out.println("Вес коробок:");
        System.out.println("Вес коробки №1 " + box1.getWeight());
        System.out.println("Вес коробки №2 " + box2.getWeight());
        System.out.println("Вес коробки №3 " + box3.getWeight());
    }

    private static void compareBoxes(Box<Apple> box1, Box<Apple> box2, Box<Orange> box3) {
        System.out.println("Коробка №1 равна коробке №2? " + box1.compare(box2));
        System.out.println("Коробка №1 равна коробке №3? " + box1.compare(box3));
    }

    public static <T> ArrayList<T> toArrayList(T[] arr) {
        return new ArrayList<>(Arrays.asList(arr));
    }

    public static <T> void changePostitionInArray(int firstIndex, int secondIndex, T[] arr) {
        if ((firstIndex >= 0 && firstIndex < arr.length) && (secondIndex >= 0 && secondIndex < arr.length)) {
            T swapBox = arr[firstIndex];
            arr[firstIndex] = arr[secondIndex];
            arr[secondIndex] = swapBox;
            return;
        }

        throw new IndexOutOfBoundsException("Индексы выходят за пределы масссива.");
    }
}

// Fruit.java

public abstract class Fruit {
    private float weight;

    public float getWeight() {
        return weight;
    }

    public void setWeight(float weight) {
        this.weight = weight;
    }
}


// Apple.java

public class Apple extends Fruit {
    private static final float WEIGHT = 1.0f;

    public Apple() {
        this.setWeight(WEIGHT);
    }
}

// Orange.java

public class Orange extends Fruit {
    private static final float WEIGHT = 1.5f;

    public Orange() {
        this.setWeight(WEIGHT);
    }
}

// Box.java

import java.util.ArrayList;

public class Box<F extends Fruit> {
    private ArrayList<F> fruits = new ArrayList<>();

    public boolean compare(Box o) {
        return this.getWeight() == o.getWeight();
    }

    public void addFruit(F fruit) {
        this.fruits.add(fruit);
    }

    public float getWeight() {
        float weight = 0f;

        if (fruits.size() > 0) {
            weight = fruits.size() * fruits.get(0).getWeight();
        }

        return weight;
    }

    public void pourTo(Box<F> o) {
        for (F f : fruits) {
            o.addFruit(f);
        }

        this.fruits.clear();
    }
}
